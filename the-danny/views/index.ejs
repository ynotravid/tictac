<html>
	<head>
		<title>Do Nothing App!</title>
		<link href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">
		<script src="http://code.createjs.com/createjs-2014.12.12.min.js"></script>
		<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular.min.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.10/angular-ui-router.js"></script>
		<script src="javascripts/angularApp.js"></script>
		<script src="vendor/scripts/isomer/isomer.js"></script>
		<script src="vendor/scripts/glmatrix/glMatrix-0.9.5.min.js"></script>
		<style> .glyphicon-thumbs-up { cursor:pointer } </style>
	</head>
	<body onload="webGLStart();" ng-app="flapperNews">

		<nav class="navbar navbar-default pull-right" ng-controller="NavCtrl">
			<ul class="nav navbar-nav">
				<li ng-show="isLoggedIn()"><a>{{ currentUser() }}</a></li>
				<li ng-show="isLoggedIn()"><a href="" ng-click="logOut()">Log Out</a></li>
				<li ng-hide="isLoggedIn()"><a href="/#/login">Log In</a></li>
				<li ng-hide="isLoggedIn()"><a href="/#/register">Register</a></li>
				<li ><a href="/#/yard/2">Yard</a></li>
			</ul>
		</nav>

		<div class="row">
			<div class="col-md-6 col-md-offset-3">
				<ui-view></ui-view>
			</div>
		</div>

		<script type="text/ng-template" id="/home.html">
			<div class="page-header">
				<h1>Flapper News</h1>
			</div>

			<div class="page-header">
				<h1>Do absolutely nothing!</h1>
			</div>

			<div ng-repeat="post in posts | orderBy: '-upvotes'">
				<span class="glyphicon glyphicon-thumbs-up"
				ng-click="incrementUpvotes(post)"></span>
				{{ post.upvotes }}
				<span style="font-size:20px; margin-left:10px;">
					<a ng-show="post.link" href="{{post.link}}">
						{{ post.title }}
					</a>
					<span ng-hide="post.link">
						{{ post.title }}
					</span>
					<span ng-show="post.author">
						posted by <a>{{post.author}}</a> |
					</span>
				</span>
				<span>
					<a href="#/posts/{{post._id}}">Comments</a>
				</span>
			</div>

			<div ng-hide="isLoggedIn()">
				<h3>You need to <a href="/#/login">Log In</a> or <a href="/#/register">Register</a> before you can add a post.</h3>
			</div>
			<form ng-submit="addPost()" ng-show="isLoggedIn()" style="margin-top:30px">
				<h3>Add a post</h3>

				<div class="form-group">
					<input type="text"
						class="form-control"
						placeholder="Title"
						ng-model="title">
					</input>
				</div>
				<div class="form-group">
					<input type="text"
						class="form-control"
						placeholder="List"
						ng-model="link">
					</input>
				</div>

				<button type="submit" class="btn btn-primary">Post</button>
			</form>
		</script>

		<script type="text/ng-template" id="/posts.html">
			<div class="page-header">
				<h3>
					<a ng-show="post.link" href="{{post.link}}">
						{{post.title}}
					</a>
					<span ng-hide="post.link">
						{{post.title}}
					</span>
				</h3>
			</div>

			<div ng-repeat="comment in post.comments | orderBy:'-upvotes'">
				<span class="glyphicon glyphicon-thumbs-up"
					ng-click="incrementUpvotes(comment)"></span>
				{{comment.upvotes}} - by {{comment.author}}
				<span style="font-size:20px; margin-left:10px;">
					{{comment.body}}
				</span>
			</div>

			<div ng-hide="isLoggedIn()">
				<h3>You need to <a href="/#/login">Log In</a> or <a href="/#/register">Register</a> before you can comment.</h3>
			</div>
			<form ng-submit="addComment()" ng-show="isLoggedIn()" style="margin-top:30px;">
				<h3>Add a new comment</h3>

				<div class="form-group">
					<input type="text" class="form-control" placeholder="Comment" ng-model="body"></input>
				</div>
				<button type="submit" class="btn btn-primary">Post</button>
			</form>
		</script>

		<script type="text/ng-template" id="/register.html">
			<div class="page-header">
				<h1>Flapper News</h1>
			</div>

			<div ng-show="error" class="alert alert-danger row">
				<span>{{ error.message }}</span>
			</div>

			<form ng-submit="register()"
				  style="margin-top:30px;">
				<h3>Register</h3>

				<div class="form-group">
					<input type="text"
						   class="form-control"
						   placeholder="Username"
						   ng-model="user.username"></input>
				</div>
				<div class="form-group">
					<input type="password"
						   class="form-control"
						   placeholder="Password"
						   ng-model="user.password"></input>
				</div>
				<button type="submit" class="btn btn-primary">Register</button>
			</form>
		</script>

		<script type="text/ng-template" id="/login.html">
			<div class="page-header">
				<h1>Flapper News</h1>
			</div>

			<div ng-show="error" class="alert alert-danger row">
				<span>{{ error.message }}</span>
			</div>

			<form ng-submit="logIn()"
				  style="margin-top:30px;">
				<h3>Log In</h3>

				<div class="form-group">
					<input type="text"
						   class="form-control"
						   placeholder="Username"
						   ng-model="user.username"></input>
				</div>
				<div class="form-group">
					<input type="password"
						   class="form-control"
						   placeholder="Password"
						   ng-model="user.password"></input>
				</div>
				<button type="submit" class="btn btn-primary">Log In</button>
			</form>
		</script>

		<script type="text/ng-template" id="/yard.html">
			<div class="page-header">
				<h3>Yard</h3>
			</div>
			<div style="display: none;">
				<img id="pad" src="/images/pad.png" />
				<img id="track" src="/images/track.png" />
				<img id="container-blue" src="/images/container-blue.png" />
				<img id="container-grey" src="/images/container-grey.png" />
				<img id="container-red" src="/images/container-red.png" />
				<img id="container-yellow" src="/images/container-yellow.png" />
				<img id="container-evergreen" src="/images/container-evergreen.png" />
				<img id="container-maersk" src="/images/container-maersk.png" />
			</div>
			<canvas id="isometric" ng-mousemove="onMouseMove($event)" ng-mousedown="onMouseDown($event)" ng-mouseup="onMouseUp($event)"></canvas>
		</script>

		<script type="text/ng-template" id="/yard-web.html">
			<div class="page-header">
				<h3>Yard WebGL</h3>
			</div>
			<canvas id="lesson01-canvas" style="border: none;" width="500" height="500"></canvas>

			<script id="shader-fs" type="x-shader/x-fragment">
				precision mediump float;
				void main(void) {
					gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
				}
			</script>

			<script id="shader-vs" type="x-shader/x-vertex">
				attribute vec3 aVertexPosition;
				uniform mat4 uMVMatrix;
				uniform mat4 uPMatrix;
				void main(void) {
					gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
				}
			</script>


			<script type="text/javascript">
				var gl;
				function initGL(canvas) {
					try {
						gl = canvas.getContext("experimental-webgl");
						gl.viewportWidth = canvas.width;
						gl.viewportHeight = canvas.height;
					} catch (e) {
					}
					if (!gl) {
						alert("Could not initialise WebGL, sorry :-(");
					}
				}
				function getShader(gl, id) {
					var shaderScript = document.getElementById(id);
					if (!shaderScript) {
						return null;
					}
					var str = "";
					var k = shaderScript.firstChild;
					while (k) {
						if (k.nodeType == 3) {
							str += k.textContent;
						}
						k = k.nextSibling;
					}
					var shader;
					if (shaderScript.type == "x-shader/x-fragment") {
						shader = gl.createShader(gl.FRAGMENT_SHADER);
					} else if (shaderScript.type == "x-shader/x-vertex") {
						shader = gl.createShader(gl.VERTEX_SHADER);
					} else {
						return null;
					}
					gl.shaderSource(shader, str);
					gl.compileShader(shader);
					if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
						alert(gl.getShaderInfoLog(shader));
						return null;
					}
					return shader;
				}
				var shaderProgram;
				function initShaders() {
					var fragmentShader = getShader(gl, "shader-fs");
					var vertexShader = getShader(gl, "shader-vs");
					shaderProgram = gl.createProgram();
					gl.attachShader(shaderProgram, vertexShader);
					gl.attachShader(shaderProgram, fragmentShader);
					gl.linkProgram(shaderProgram);
					if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
						alert("Could not initialise shaders");
					}
					gl.useProgram(shaderProgram);
					shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
					gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
					shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
					shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
				}
				var mvMatrix = mat4.create();
				var pMatrix = mat4.create();
				function setMatrixUniforms() {
					gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
					gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
				}
				var triangleVertexPositionBuffer;
				var squareVertexPositionBuffer;
				function initBuffers() {
					triangleVertexPositionBuffer = gl.createBuffer();
					gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
					var vertices = [
						0.0,  1.0,  0.0,
						-1.0, -1.0,  0.0,
						1.0, -1.0,  0.0
					];
					gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
					triangleVertexPositionBuffer.itemSize = 3;
					triangleVertexPositionBuffer.numItems = 3;
					squareVertexPositionBuffer = gl.createBuffer();
					gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
					vertices = [
						1.0,  1.0,  0.0,
						-1.0,  1.0,  0.0,
						1.0, -1.0,  0.0,
						-1.0, -1.0,  0.0
					];
					gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
					squareVertexPositionBuffer.itemSize = 3;
					squareVertexPositionBuffer.numItems = 4;
				}
				function drawScene() {
					gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
					gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
					mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
					mat4.identity(mvMatrix);
					mat4.translate(mvMatrix, [-1.5, 0.0, -7.0]);
					gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
					gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
					setMatrixUniforms();
					gl.drawArrays(gl.TRIANGLES, 0, triangleVertexPositionBuffer.numItems);
					mat4.translate(mvMatrix, [3.0, 0.0, 0.0]);
					gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
					gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
					setMatrixUniforms();
					gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);
				}
				function webGLStart() {
					var canvas = document.getElementById("lesson01-canvas");
					initGL(canvas);
					initShaders();
					initBuffers();
					gl.clearColor(0.0, 0.0, 0.0, 1.0);
					gl.enable(gl.DEPTH_TEST);
					drawScene();
				}
			</script>


		</script>
	</body>
	<script src="http://code.createjs.com/createjs-2014.12.12.min.js"></script>
</html>